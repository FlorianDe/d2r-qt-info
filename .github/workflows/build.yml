name: CI Build

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  app_name: D2R-Qt-Info
  qt_version: "6.7.2"

jobs:
  build-macos:
    strategy:
      matrix:
        include:
          - name: "macOS Sonoma 14 arm"
            os-short: MacOS
            os: macos-latest
            arch: "ARM"
          - name: "macOS Monterey 12 x86-64"
            os-short: MacOS
            os: macos-12
            arch: "x86-64"
      fail-fast: false

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #      - name: Set up Qt and other build dependencies
      #        run: |
      #          brew install qt@6 cmake

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: "${{ github.workspace }}/qt/"
          key: qt-${{matrix.os}}-${{ env.qt_version }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          cache: true
          cache-key-prefix: qt-${{matrix.os}}-${{ env.qt_version }}
          version: ${{ env.qt_version }}
          dir: "${{ github.workspace }}/qt/"

      - name: Print debug information
        run: |
          which macdeployqt
          cmake -version
          uname -s
          pwd
          find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'

      - name: Create Build Directory
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure Cmake
        shell: powershell
        working-directory: ${{github.workspace}}
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build .

      - name: Bundle App
        run: |
          ${{ github.workspace }}/qt/Qt/${{ env.qt_version }}/macos/bin/macdeployqt ${{github.workspace}}/build/${{env.app_name}}.app

      - name: Application test
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: ./${{env.app_name}}.app/Contents/MacOS/${{env.app_name}} --version

      - name: Prepare artifacts
        working-directory: ${{github.workspace}}/build
        run: |
          mv ${{env.app_name}}.app ${{env.app_name}}.${{ matrix.os-short }}.${{ matrix.arch }}.app
          zip -r ${{github.workspace}}/build/${{env.app_name}}.${{ matrix.os-short }}.${{ matrix.arch }}.zip ${{env.app_name}}.${{ matrix.os-short }}.${{ matrix.arch }}.app

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{env.app_name}}.${{ matrix.os-short }}.${{ matrix.arch }}.zip
          path: ${{github.workspace}}/build/${{env.app_name}}.${{ matrix.os-short }}.${{ matrix.arch }}.zip
          if-no-files-found: error

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #      - name: Cache Qt
      #        id: cache-qt
      #        uses: actions/cache@v4
      #        with:
      #          path: "${{ github.workspace }}/qt/"
      #          key: qt-${{matrix.os}}-${{ env.qt_version }}
      #
      #      - name: Install Qt
      #        uses: jurplel/install-qt-action@v4
      #        with:
      #          cache: true
      #          cache-key-prefix: qt-windows-latest-${{ env.qt_version }}
      #          version: ${{ env.qt_version }}
      #          dir: "${{ github.workspace }}/qt/"

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.7.2'

      - uses: ilammy/msvc-dev-cmd@v1 # This action essentially calls vcvarsall.bat for the latest VS in the runner for x64

      - name: Print debug information
        shell: powershell
        run: |
          where windeployqt
          cmake -version
          tree /F
          tree $env:Qt6_DIR /F

      - name: Create Build Directory
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure Cmake
        shell: powershell
        working-directory: ${{github.workspace}}
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        shell: powershell
        working-directory: ${{github.workspace}}
        run: |
          cmake --build build --config Release

      - name: Move .exe
        shell: powershell
        working-directory: ${{github.workspace}}/build/Release
        run: |
          New-Item -ItemType Directory -Force -Path ".\Bundle"
          Move-Item -Force "${{env.app_name}}.exe" ".\Bundle"

      - name: Bundle App
        shell: powershell
        working-directory: ${{github.workspace}}/build/Release/Bundle
        run: |
          & "${{env.Qt6_DIR}}/bin/windeployqt.exe" ${{env.app_name}}.exe --no-translations

      #TODO Have to revisit this part, somehow the App is starting without passed options...
      #      - name: Application test
      #        shell: powershell
      #        working-directory: ${{github.workspace}}/build/Release
      #        run: |
      #          ./${{env.app_name}}.exe --version

      # Maybe include 32bit/64bit instead of Win inside the name
      #      - name: Rename
      #        shell: powershell
      #        working-directory: ${{github.workspace}}/build/Release/Bundle
      #        run: |
      #          mv ${{env.app_name}}.exe ${{env.app_name}}.Win.exe

      - name: Create .zip including all .dlls etc
        shell: powershell
        working-directory: ${{github.workspace}}/build/Release
        run: |
          Compress-Archive -Path ".\Bundle\*" -DestinationPath ".\${{env.app_name}}.Windows.zip"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{env.app_name}}.Windows.zip
          path: ${{github.workspace}}/build/Release/${{env.app_name}}.Windows.zip
          if-no-files-found: error

  release:
    name: Release build
    runs-on: ubuntu-latest
    needs: [ build-macos, build-windows ]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: ${{env.app_name}}*
          merge-multiple: true

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/D2R-Qt-Info.exe
            artifacts/D2R-Qt-Info-MacARM.zip
